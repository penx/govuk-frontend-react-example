{"version":3,"sources":["/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/components/header/_header.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/helpers/_typography.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/settings/_typography-font-families.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/settings/_typography-font.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/settings/_typography-responsive.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/tools/_px-to-rem.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/settings/_colours-palette.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/helpers/_font-faces.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/tools/_font-url.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/vendor/_sass-mq.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/settings/_spacing.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/helpers/_clearfix.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/helpers/_focusable.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/helpers/_spacing.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/helpers/_shape-arrow.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/objects/_width-container.scss","/Users/penx/Development/govuk-frontend-react-example/node_modules/govuk-frontend/settings/_measurements.scss"],"names":[],"mappings":"AAiBE,6BCFA,iCCL8C,ADM9C,mCAAmC,AACnC,kCAAkC,AAiClC,gBET6B,AFiGzB,eGee,AHbb,kBI1HuC,AJ4HzC,oBApEqC,ADtDvC,8BMec,ANdd,WMcc,ANbd,kBMQc,CNNf;;AOLG,oLAAoL,AAEpL,WACE,gBAAkB,AAClB,+CCEsC,ADDtC,0MAE8D,AAC9D,gBAAmB,AACnB,kBAAkB,AAClB,qBAAsB,CAAA,AAGxB,WACE,gBAAkB,AAClB,8CCTsC,ADUtC,uMAE6D,AAC7D,gBAAiB,AACjB,kBAAkB,AAClB,qBAAsB,CAAA,AAGxB,WACE,8BAAgC,AAChC,uDCpBsC,ADqBtC,kOAEsE,AACtE,gBAAmB,AACnB,kBAAkB,AAClB,qBAAsB,CAAA,AAGxB,WACE,8BAAgC,AAChC,sDC/BsC,ADgCtC,+NAEqE,AACrE,gBAAiB,AACjB,kBAAkB,AAClB,qBAAsB,CAAA,AEwKtB,aTrNN,6BCQE,sBEIgC,CHLjC,CAAA,AS8MK,6BTrNN,6BCqIM,eGOa,AHLX,eItIqC,AJwIvC,gBAhFmC,CDlDxC,CAAA,AS8MK,aTrNN,6BCgIM,eGgBa,AHfb,eGgBc,CJ1InB,CAAA,AAED,oDACE,eUbK,AVcL,oBMAa,CNKd,AAPD,8FAKI,UUjBG,CVkBJ,AAGH,wCAEE,kBAAkB,AAClB,oBUzBK,AV0BL,iBU1BK,AV2BL,gCMZa,CNad,AAND,8CWzBE,WAAW,AACX,cAAc,AACd,UAAW,CACZ,AX8BD,uCACE,gBUhCI,CViCL,AAED,6CACE,iBAAiB,AACjB,kBAAkB,AAClB,qBAAsB,CACvB,AAED,4DACE,WAAW,AACX,YAAY,AACZ,SAAS,AACT,qBAAsB,CACvB,AAED,2CC7CA,iCCL8C,ADM9C,mCAAmC,AACnC,kCAAkC,AAiClC,gBET6B,AFiGzB,eGbe,AHeb,mBI1HuC,AJ4HzC,oBApEqC,ADZvC,qBAAqB,AACrB,kBUlDK,CVmDN,ASsKK,aT1KN,2CCnCE,sBEIgC,CHmCjC,CAAA,ASsKK,6BT1KN,2CC0FM,eGrBa,AHuBX,iBItIqC,AJwIvC,gBAhFmC,CDVxC,CAAA,ASsKK,aT1KN,2CCqFM,eGZa,AHab,gBGZe,CJtEpB,CAAA,AAED,mCAGE,oBAAqB,CAyBtB,AA5BD,yCYrCE,0BNNe,AMOf,iBAAiB,AACjB,wBNRe,CMShB,AZkCD,mFAOI,UMtCY,CNuCb,AARH,yCAWI,yBAA0B,CAC3B,AAZH,yCAiBI,aMrDY,CNsDb,AAYH,6CCjFA,iCCL8C,ADM9C,mCAAmC,AACnC,kCAAkC,AA2ClC,gBEb0B,AHsDxB,qBAAqB,AACrB,eAAe,AACf,gBAAiB,CAelB,ASgHK,aTtIN,6CCvEE,sBEIgC,CHyFjC,CAAA,AAtBD,uGAWI,oBAAqB,CACtB,AAZH,uGAiBI,mBAAmB,AAGnB,uBAAwB,CACzB,AAGH,iDACE,qBAAqB,AACrB,mBU7GK,ATEP,iCCL8C,ADM9C,mCAAmC,AACnC,kCAAkC,AA2ClC,gBEb0B,AF2FtB,eGbe,AHeb,mBI1HuC,AJ4HzC,mBApEqC,CDkDxC,AS0GK,aT9GN,iDC/FE,sBEIgC,CH+FjC,CAAA,AS0GK,6BT9GN,iDC8BM,eGrBa,AHuBX,iBItIqC,AJwIvC,gBAhFmC,CDkDxC,CAAA,AS0GK,aT9GN,iDCyBM,eGZa,AHab,gBGZe,CJVpB,CAAA,AAED,mCaxCM,mBHtCM,AVgFV,kBU7GK,CVqHN,AS8FK,6BTxGN,mCajCQ,kBH5CM,CVuFb,CAAA,AS8FK,6BTxGN,mCAKI,aAAa,AACb,gBAAgB,AAChB,WAAW,AACX,kBAAmB,CAEtB,CAAA,AS8FK,6BT5FN,sCAEI,aAAa,AACb,UAAW,CAEd,CAAA,AAED,0CClIA,iCCL8C,ADM9C,mCAAmC,AACnC,kCAAkC,AAiClC,gBET6B,AFiGzB,eGee,AHbb,kBI1HuC,AJ4HzC,oBApEqC,ADyEvC,aAAa,AACb,kBAAkB,AAClB,SUtIK,AVuIL,QAAQ,AACR,SAAS,AACT,UAAU,AACV,SAAS,AACT,WMvHc,ANwHd,eAAgB,CAiBjB,AS0DK,aTrFN,0CCxHE,sBEIgC,CH+IjC,CAAA,AS0DK,6BTrFN,0CCKM,eGOa,AHLX,eItIqC,AJwIvC,gBAhFmC,CDkGxC,CAAA,AS0DK,aTrFN,0CCAM,eGgBa,AHfb,eGgBc,CJUnB,CAAA,AA3BD,gDAaI,yBAA0B,CAC3B,AAdH,gDc3GA,qBd4HoF,Ac1HpF,QAAQ,AACR,SAAS,AAwBP,+CAAoD,AAC5C,uCAA4C,AAEpD,yBAtBuB,AAsBvB,mBAtBuB,AAsBvB,0BAtBuB,AAuBvB,yBAAyB,Ad8FvB,WAAW,AACX,eUxJE,CVyJH,AApBH,gDYnIE,0BNSe,AMRf,gBAAiB,CAClB,AHsNK,6BTrFN,0CAyBI,QU5JG,CV8JN,CAAA,AAED,sDcxIA,qBd0IkF,AcxIlF,QAAQ,AACR,SAAS,AAYP,kDAAsD,AAC9C,0CAA8C,AAEtD,yBAVuB,AAUvB,mBAVuB,AAUvB,0BAVuB,AAWvB,2BAA4B,CdwH3B,AAGH,yCAEE,cAAc,AACd,SAAS,AACT,UAAU,AACV,eAAgB,CACjB,AS4CK,6BTlDN,yCavFQ,kBH5CM,CVyIb,CAAA,AAED,qEAEI,aAAc,CAIf,ASoCG,6BT1CN,qEAIM,YAAa,CAEhB,CAAA,AANH,oEASI,YAAa,CAId,AS6BG,6BT1CN,oEAWM,aAAc,CAEjB,CAAA,AAbH,0EAgBI,aAAc,CACf,ASyBG,6BTrBN,8CAEI,SAAS,AACT,cAA2B,AAC3B,gBAAiB,CAEpB,CAAA,AAED,0DACE,gBUxMK,CVyMN,AAED,8CACE,eAA2B,AAC3B,+BAhN0C,CA6N3C,ASNK,6BTTN,8CAKI,qBAAqB,AACrB,kBUrNG,AVsNH,cAA2B,AAC3B,QAAS,CAOZ,CAAA,AAfD,gDC9MA,iCCL8C,ADM9C,mCAAmC,AACnC,kCAAkC,AA2ClC,gBEb0B,AF2FtB,eGee,AHbb,kBI1HuC,AJ4HzC,oBApEqC,ADgKrC,kBAAmB,CACpB,ASLG,aTTN,gDCpME,sBEIgC,CH8M/B,CAAA,ASLG,6BTTN,gDCvEM,eGOa,AHLX,eItIqC,AJwIvC,gBAhFmC,CDiKtC,CAAA,ASLG,aTTN,gDC5EM,eGgBa,AHfb,eGgBc,CJyEjB,CAAA,AAGH,2LAKM,aArO4B,CAsO7B,AANL,8DAWM,aM3NU,CN4NX,AAIL,yDACE,cAAe,CAChB,AS1BK,aT6BJ,6BACE,sBAAsB,AACtB,cMvOY,ANwOZ,sBAAuB,CACxB,AAGD,4DACE,YAAa,CACd,AAED,mFAGI,aMnPU,CNoPX,AAJH,yCAQI,YAAa,CACd,CAAA,AAML,yGAEE,kBAAkB,AAClB,QAAS,CACV,AAED,6BAEE,eADY,CAEb,Ae9QD,sCAtBA,gBCasB,ADNtB,aCoBmC,CDHlC,AN4MK,6BM9MN,sCAXE,aCSe,CDIhB,CAAA,AN4MK,0BM9MN,sCALE,aAAc,CAOf,CAAA","file":"2.1dbd6a99.chunk.css","sourcesContent":["@import \"../../settings/all\";\n@import \"../../tools/all\";\n@import \"../../helpers/all\";\n\n@import \"../../helpers/typography\";\n\n@include govuk-exports(\"govuk/component/header\") {\n\n  $govuk-header-background: govuk-colour(\"black\");\n  $govuk-header-border-color: $govuk-brand-colour;\n  $govuk-header-border-width: govuk-spacing(2);\n  $govuk-header-text: govuk-colour(\"white\");\n  $govuk-header-link: govuk-colour(\"white\");\n  $govuk-header-link-hover: govuk-colour(\"white\");\n  $govuk-header-link-active: #1d8feb;\n  $govuk-header-nav-item-border-color: #2e3133;\n\n  .govuk-header {\n    @include govuk-font($size: 16);\n\n    border-bottom: govuk-spacing(2) solid govuk-colour(\"white\");\n    color: $govuk-header-text;\n    background: $govuk-header-background;\n\n  }\n\n  .govuk-header__container--full-width {\n    padding: 0 govuk-spacing(3);\n    border-color: $govuk-header-border-color;\n\n    .govuk-header__menu-button {\n      right: govuk-spacing(3);\n    }\n  }\n\n  .govuk-header__container {\n    @include govuk-clearfix;\n    position: relative;\n    margin-bottom: -$govuk-header-border-width;\n    padding-top: govuk-spacing(2);\n    border-bottom: $govuk-header-border-width solid $govuk-header-border-color;\n  }\n\n  .govuk-header__logotype {\n    margin-right: govuk-spacing(1);\n  }\n\n  .govuk-header__logotype-crown {\n    margin-right: 1px;\n    fill: currentColor;\n    vertical-align: middle;\n  }\n\n  .govuk-header__logotype-crown-fallback-image {\n    width: 36px;\n    height: 32px;\n    border: 0;\n    vertical-align: middle;\n  }\n\n  .govuk-header__product-name {\n    @include govuk-font($size: 24);\n    display: inline-table;\n    padding-right: govuk-spacing(2);\n  }\n\n  .govuk-header__link {\n    @include govuk-focusable-fill;\n\n    text-decoration: none;\n\n    &:link,\n    &:visited {\n      color: $govuk-header-link;\n    }\n\n    &:hover {\n      text-decoration: underline;\n    }\n\n    // When focussed, the text colour needs to be darker to ensure that colour\n    // contrast is still acceptable\n    &:focus {\n      color: $govuk-focus-text-colour;\n    }\n\n    // alphagov/govuk_template includes a specific a:link:focus selector\n    // designed to make unvisited links a slightly darker blue when focussed, so\n    // we need to override the text colour for that combination of selectors.\n    @include govuk-compatibility(govuk_template) {\n      &:link:focus {\n        @include govuk-text-colour;\n      }\n    }\n  }\n\n  .govuk-header__link--homepage {\n    // Font size needs to be set on the link so that the box sizing is correct\n    // in Firefox\n    @include govuk-font($size: false, $weight: bold);\n\n    display: inline-block;\n    font-size: 30px; // We don't have a mixin that produces 30px font size\n    line-height: 30px;\n\n    &:link,\n    &:visited {\n      text-decoration: none;\n    }\n\n    &:hover,\n    &:active {\n      // Negate the added border\n      margin-bottom: -1px;\n      // Omitting colour will use default value of currentColor â€“ if we\n      // specified currentColor explicitly IE8 would ignore this rule.\n      border-bottom: 1px solid;\n    }\n  }\n\n  .govuk-header__link--service-name {\n    display: inline-block;\n    margin-bottom: govuk-spacing(2);\n    @include govuk-font($size: 24, $weight: bold);\n  }\n\n  .govuk-header__logo {\n    @include govuk-responsive-margin(2, \"bottom\");\n    padding-right: govuk-spacing(8);\n\n    @include mq ($from: desktop) {\n      width: 33.33%;\n      padding-right: 0;\n      float: left;\n      vertical-align: top;\n    }\n  }\n\n  .govuk-header__content {\n    @include mq ($from: desktop) {\n      width: 66.66%;\n      float: left;\n    }\n  }\n\n  .govuk-header__menu-button {\n    @include govuk-font($size: 16);\n    display: none;\n    position: absolute;\n    top: govuk-spacing(4);\n    right: 0;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    color: $govuk-header-link;\n    background: none;\n\n    &:hover {\n      text-decoration: underline;\n    }\n\n    &::after {\n      @include govuk-shape-arrow($direction: down, $base: 10px, $display: inline-block);\n      content: \"\";\n      margin-left: govuk-spacing(1);\n    }\n\n    @include govuk-focusable;\n\n    @include mq ($from: tablet) {\n      top: govuk-spacing(3);\n    }\n  }\n\n  .govuk-header__menu-button--open {\n    &::after {\n      @include govuk-shape-arrow($direction: up, $base: 10px, $display: inline-block);\n    }\n  }\n\n  .govuk-header__navigation {\n    @include govuk-responsive-margin(2, \"bottom\");\n    display: block;\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  .js-enabled {\n    .govuk-header__menu-button {\n      display: block;\n      @include mq ($from: desktop) {\n        display: none;\n      }\n    }\n\n    .govuk-header__navigation {\n      display: none;\n      @include mq ($from: desktop) {\n        display: block;\n      }\n    }\n\n    .govuk-header__navigation--open {\n      display: block;\n    }\n  }\n\n\n  .govuk-header__navigation--end {\n    @include mq ($from: desktop) {\n      margin: 0;\n      padding: govuk-spacing(1) 0;\n      text-align: right;\n    }\n  }\n\n  .govuk-header__navigation--no-service-name {\n    padding-top: govuk-spacing(7);\n  }\n\n  .govuk-header__navigation-item {\n    padding: govuk-spacing(2) 0;\n    border-bottom: 1px solid $govuk-header-nav-item-border-color;\n\n    @include mq ($from: desktop) {\n      display: inline-block;\n      margin-right: govuk-spacing(3);\n      padding: govuk-spacing(1) 0;\n      border: 0;\n    }\n\n    a {\n      @include govuk-font($size: 16, $weight: bold);\n      white-space: nowrap;\n    }\n  }\n\n  .govuk-header__navigation-item--active {\n    a {\n      &:link,\n      &:hover,\n      &:visited {\n        color: $govuk-header-link-active;\n      }\n\n      // When focussed, the text colour needs to be darker to ensure that colour\n      // contrast is still acceptable\n      &:focus {\n        color: $govuk-focus-text-colour;\n      }\n    }\n  }\n\n  .govuk-header__navigation-item:last-child {\n    margin-right: 0;\n  }\n\n  @include govuk-media-query($media-type: print) {\n    .govuk-header {\n      border-bottom-width: 0;\n      color: govuk-colour(\"black\");\n      background: transparent;\n    }\n\n    // Hide the inverted crown when printing in browsers that don't support SVG.\n    .govuk-header__logotype-crown-fallback-image {\n      display: none;\n    }\n\n    .govuk-header__link {\n      &:link,\n      &:visited {\n        color: govuk-colour(\"black\");\n      }\n\n      // Do not append link href to GOV.UK link when printing (e.g. '(/)')\n      &:after {\n        display: none;\n      }\n    }\n  }\n\n  // Begin adjustments for font baseline offset\n  // These should be removed when the font is updated with the correct baseline\n  .govuk-header__logotype-crown,\n  .govuk-header__logotype-crown-fallback-image {\n    position: relative;\n    top: -4px;\n  }\n\n  .govuk-header {\n    $offset: 3px;\n    padding-top: $offset;\n  }\n  // End adjustments\n\n}\n","////\n/// @group helpers\n////\n\n@import \"../tools/px-to-rem\";\n\n/// 'Common typography' helper\n///\n/// Sets the font family and associated properties, such as font smoothing. Also\n/// overrides the font for print.\n///\n/// @param {List} $font-family [$govuk-font-family] Font family to use\n/// @access public\n\n@mixin govuk-typography-common($font-family: $govuk-font-family) {\n  font-family: $font-family;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\n  // If using NTA, include the font-face definition\n  @if ($govuk-font-family == $govuk-font-family-nta) {\n    @include _govuk-font-face-nta;\n  }\n\n  @include govuk-media-query($media-type: print) {\n    font-family: $govuk-font-family-print;\n  }\n}\n\n/// Text colour helper\n///\n/// Sets the text colour, including a suitable override for print.\n///\n/// @access public\n\n@mixin govuk-text-colour {\n  color: $govuk-text-colour;\n\n  @include govuk-media-query($media-type: print) {\n    color: $govuk-print-text-colour;\n  }\n}\n\n/// Regular font weight helper\n///\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`. Generally Used to create override classes.\n/// @access public\n\n@mixin govuk-typography-weight-regular($important: false) {\n  font-weight: $govuk-font-weight-regular iff($important, !important);\n}\n\n/// Bold font weight helper\n///\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`. Generally Used to create override classes.\n/// @access public\n\n@mixin govuk-typography-weight-bold($important: false) {\n  font-weight: $govuk-font-weight-bold iff($important, !important);\n}\n\n/// Convert line-heights specified in pixels into a relative value, unless\n/// they are already unit-less (and thus already treated as relative values)\n/// or the units do not match the units used for the font size.\n///\n/// @param {Number} $line-height Line height\n/// @param {Number} $font-size Font size\n/// @return {Number} The line height as either a relative value or unmodified\n///\n/// @access private\n@function _govuk-line-height($line-height, $font-size) {\n  @if not unitless($line-height) and unit($line-height) == unit($font-size) {\n    $line-height: $line-height / $font-size;\n  }\n\n  @return $line-height;\n}\n\n/// Responsive typography helper\n///\n/// Takes a 'font map' as an argument and uses it to create font-size and\n/// line-height declarations for different breakpoints, and for print.\n///\n/// Example font map:\n///\n/// $my-font-map: (\n///   null: (\n///     font-size: 16px,\n///     line-height: 20px\n///   ),\n///   tablet: (\n///     font-size: 19px,\n///     line-height: 25px\n///   ),\n///   print: (\n///     font-size: 14pt,\n///     line-height: 1.15\n///   )\n/// );\n///\n/// @param {Map} $font-map - Font map\n/// @param {Number} $override-line-height [false] - Non responsive custom line\n///   height. Omit to use the line height from the font map.\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`.\n///\n/// @access public\n\n@mixin govuk-typography-responsive($size, $override-line-height: false, $important: false) {\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if($override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size iff($important, !important);\n    $font-size-rem: $font-size-rem iff($important, !important);\n    $line-height: $line-height iff($important, !important);\n\n    @if $breakpoint == null {\n      font-size: $font-size; // sass-lint:disable no-duplicate-properties\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n      }\n      line-height: $line-height;\n    } @elseif $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size; // sass-lint:disable no-duplicate-properties\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n}\n\n/// Font helper\n///\n/// @param {Number} $size - Size of the font as it would appear on desktop -\n///   uses the responsive font size map\n/// @param {String} $weight [regular] - Weight: `bold` or `regular`\n/// @param {Boolean} $tabular [false] - Whether to use tabular numbers or not\n/// @param {Number} $line-height [false] - Line-height, if overriding the default\n///\n/// @access public\n\n@mixin govuk-font($size, $weight: regular, $tabular: false, $line-height: false) {\n  @if $tabular {\n    @include govuk-typography-common($font-family: $govuk-font-family-tabular);\n  } @else {\n    @include govuk-typography-common;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-typography-responsive($size, $override-line-height: $line-height);\n  }\n}\n","////\n/// @group settings/typography\n////\n\n/// List of font families to use if using NTA (the default font 'stack' for\n/// GOV.UK)\n///\n/// @type List\n/// @access public\n\n$govuk-font-family-nta: \"nta\", Arial, sans-serif;\n\n/// List of font families to use if using the 'tabular numbers' subset of NTA\n/// (the default font 'stack' for GOV.UK)\n///\n/// Because ntatabularnumbers only includes the digits 0-10, all other glyphs\n/// will 'fall-through' the stack to NTA.\n///\n/// @type List\n/// @access public\n\n$govuk-font-family-nta-tabular: \"ntatabularnumbers\", $govuk-font-family-nta;\n","////\n/// @group settings/typography\n////\n\n\n\n// =========================================================\n// Font families\n// =========================================================\n\n/// Font families to use for all typography on screen media\n///\n/// @type List\n/// @access public\n\n$govuk-font-family: $govuk-font-family-nta !default;\n\n/// Font families to use when displaying tabular numbers\n///\n/// @type List\n/// @access public\n\n$govuk-font-family-tabular: $govuk-font-family-nta-tabular !default;\n\n/// Font families to use for print media\n///\n/// @type List\n/// @access public\n\n$govuk-font-family-print: sans-serif !default;\n\n\n\n// =========================================================\n// Font weights\n// =========================================================\n\n/// Font weight for regular typography\n///\n/// @type Number\n/// @access public\n$govuk-font-weight-regular: 400 !default;\n\n/// Font weight for bold typography\n///\n/// @type Number\n/// @access public\n$govuk-font-weight-bold: 700 !default;\n","////\n/// @group settings/typography\n////\n\n/// Whether or not to define font sizes in rem, improving accessibility by\n/// allowing users to adjust the base font-size. This is currently off by\n/// default, but will be enabled by default for projects that do not use\n/// alphagov/govuk_template in the next major release.\n///\n/// If this is enabled, you should make sure that $govuk-root-font-size is set\n/// correctly for your project\n///\n/// If any of the compatibility variables are set, then default\n/// responsive typography to off.\n///\n/// @type Boolean\n/// @access public\n\n$govuk-typography-use-rem: if((\n    $govuk-compatibility-govukfrontendtoolkit or\n    $govuk-compatibility-govuktemplate or\n    $govuk-compatibility-govukelements\n  ), false, true) !default;\n\n/// Root font size\n///\n/// This is used to calculate rem sizes for the typography, and should match the\n/// _effective_ font-size of your root (or html) element.\n///\n/// Ideally you should not be setting the font-size on the html or root element\n/// in order to allow it to scale with user-preference, in which case this\n/// should be set to 16px.\n///\n/// If you are integrating Frontend into an existing project that also uses\n/// alphagov/govuk_template then you should set this to 10px to match the 62.5%\n/// (10px) base font size that govuk_template sets on the <html> element.\n///\n/// @type Number\n/// @access public\n\n$govuk-root-font-size: 16px !default;\n\n/// Responsive typography font map\n///\n/// This is used to generate responsive typography that adapts according to the\n/// breakpoints.\n///\n/// Font size and font weight can be defined for each breakpoint. You can define\n/// different behaviour on tablet and desktop. The 'null' breakpoint is for\n/// mobile.\n///\n/// Line-heights will automatically be converted from pixel measurements into\n/// relative values. For example, with a font-size of 16px and a line-height of\n/// 24px, the line-height will be converted to 1.5 before output.\n///\n/// You can also specify a separate font size and line height for print media.\n///\n/// @type Map\n///\n/// @prop {Number} $point.$breakpoint.font-size - Font size for `$point` at `$breakpoint`\n/// @prop {Number} $point.$breakpoint.line-height - Line height for `$point` at `$breakpoint`\n/// @prop {Number} $point.print.font-size - Font size for `$point` when printing\n/// @prop {Number} $point.print.line-height - Line height for `$point` when printing\n///\n/// @access public\n\n$govuk-typography-scale: (\n  80: (\n    null: (\n      font-size: 53px,\n      line-height: 55px\n    ),\n    tablet: (\n      font-size: 80px,\n      line-height: 80px\n    ),\n    print: (\n      font-size: 53pt,\n      line-height: 1.1\n    )\n  ),\n  48: (\n    null: (\n      font-size: 32px,\n      line-height: 35px\n    ),\n    tablet: (\n      font-size: 48px,\n      line-height: 50px\n    ),\n    print: (\n      font-size: 32pt,\n      line-height: 1.15\n    )\n  ),\n  36: (\n    null: (\n      font-size: 24px,\n      line-height: 25px\n    ),\n    tablet: (\n      font-size: 36px,\n      line-height: 40px\n    ),\n    print: (\n      font-size: 24pt,\n      line-height: 1.05\n    )\n  ),\n  27: (\n    null: (\n      font-size: 18px,\n      line-height: 20px\n    ),\n    tablet: (\n      font-size: 27px,\n      line-height: 30px\n    ),\n    print: (\n      font-size: 18pt,\n      line-height: 1.15\n    )\n  ),\n  24: (\n    null: (\n      font-size: 18px,\n      line-height: 20px\n    ),\n    tablet: (\n      font-size: 24px,\n      line-height: 30px\n    ),\n    print: (\n      font-size: 18pt,\n      line-height: 1.15\n    )\n  ),\n  19: (\n    null: (\n      font-size: 16px,\n      line-height: 20px\n    ),\n    tablet: (\n      font-size: 19px,\n      line-height: 25px\n    ),\n    print: (\n      font-size: 14pt,\n      line-height: 1.15\n    )\n  ),\n  16: (\n    null: (\n      font-size: 14px,\n      line-height: 16px\n    ),\n    tablet: (\n      font-size: 16px,\n      line-height: 20px\n    ),\n    print: (\n      font-size: 14pt,\n      line-height: 1.2\n    )\n  ),\n  14: (\n    null: (\n      font-size: 12px,\n      line-height: 15px\n    ),\n    tablet: (\n      font-size: 14px,\n      line-height: 20px\n    ),\n    print: (\n      font-size: 12pt,\n      line-height: 1.2\n    )\n  )\n) !default;\n","////\n/// @group tools\n////\n\n/// Convert pixels to rem\n///\n/// The $govuk-root-font-size (defined in settings/_typography-responsive.scss)\n/// must be configured to match the font-size of your root (html) element\n///\n/// @param {Number} $value - Length in pixels\n/// @return {Number} Length in rems\n/// @access public\n\n@function govuk-px-to-rem($value) {\n  @if (unitless($value)) {\n    $value: $value * 1px;\n  }\n\n  @return $value / $govuk-root-font-size * 1rem;\n}\n","////\n/// @group settings/colours\n////\n\n/// Colour palette\n///\n/// @type Map\n///\n/// @prop $colour - Representation for the given $colour, where $colour is the\n///   friendly name for the colour (e.g. \"red\": #ff0000);\n///\n/// @access public\n\n$govuk-colours: (\n  \"purple\": #2e358b,\n  \"light-purple\": #6f72af,\n  \"bright-purple\": #912b88,\n  \"pink\": #d53880,\n  \"light-pink\": #f499be,\n  \"red\": #b10e1e,\n  \"bright-red\": #df3034,\n  \"orange\": #f47738,\n  \"brown\": #b58840,\n  \"yellow\": #ffbf47,\n  \"light-green\": #85994b,\n  \"green\": #006435,\n  \"turquoise\": #28a197,\n  \"light-blue\": #2b8cc4,\n  \"blue\": #005ea5,\n\n  \"black\": #0b0c0c,\n  \"grey-1\": #6f777b,\n  \"grey-2\": #bfc1c3,\n  \"grey-3\": #dee0e2,\n  \"grey-4\": #f8f8f8,\n  \"white\": #ffffff\n) !default;\n","////\n/// @group helpers\n////\n\n// Disables linting for this file only\n// sass-lint:disable no-css-comments, no-duplicate-properties, property-sort-order, indentation\n\n@import \"../tools/exports\";\n\n/// Font Face - NTA\n///\n/// Outputs the font-face declaration for NTA at the root of the CSS document\n/// the first time it is called.\n///\n/// @access private\n\n@mixin _govuk-font-face-nta {\n  @include govuk-exports(\"govuk/helpers/font-face\") {\n    @at-root {\n      /*! Copyright (c) 2011 by Margaret Calvert & Henrik Kubel. All rights reserved. The font has been customised for exclusive use on gov.uk. This cut is not commercially available. */\n\n      @font-face {\n        font-family: \"nta\";\n        src: govuk-font-url(\"light-2c037cf7e1-v1.eot\");\n        src: govuk-font-url(\"light-2c037cf7e1-v1.eot?#iefix\") format(\"embedded-opentype\"),\n             govuk-font-url(\"light-f38ad40456-v1.woff2\") format(\"woff2\"),\n             govuk-font-url(\"light-458f8ea81c-v1.woff\") format(\"woff\");\n        font-weight: normal;\n        font-style: normal;\n        font-display: fallback;\n      }\n\n      @font-face {\n        font-family: \"nta\";\n        src: govuk-font-url(\"bold-fb2676462a-v1.eot\");\n        src: govuk-font-url(\"bold-fb2676462a-v1.eot?#iefix\") format(\"embedded-opentype\"),\n             govuk-font-url(\"bold-a2452cb66f-v1.woff2\") format(\"woff2\"),\n             govuk-font-url(\"bold-f38c792ac2-v1.woff\") format(\"woff\");\n        font-weight: bold;\n        font-style: normal;\n        font-display: fallback;\n      }\n\n      @font-face {\n        font-family: \"ntatabularnumbers\";\n        src: govuk-font-url(\"light-tabular-498ea8ffe2-v1.eot\");\n        src: govuk-font-url(\"light-tabular-498ea8ffe2-v1.eot?#iefix\") format(\"embedded-opentype\"),\n             govuk-font-url(\"light-tabular-851b10ccdd-v1.woff2\") format(\"woff2\"),\n             govuk-font-url(\"light-tabular-62cc6f0a28-v1.woff\") format(\"woff\");\n        font-weight: normal;\n        font-style: normal;\n        font-display: fallback;\n      }\n\n      @font-face {\n        font-family: \"ntatabularnumbers\";\n        src: govuk-font-url(\"bold-tabular-357fdfbcc3-v1.eot\");\n        src: govuk-font-url(\"bold-tabular-357fdfbcc3-v1.eot?#iefix\") format(\"embedded-opentype\"),\n             govuk-font-url(\"bold-tabular-b89238d840-v1.woff2\") format(\"woff2\"),\n             govuk-font-url(\"bold-tabular-784c21afb8-v1.woff\") format(\"woff\");\n        font-weight: bold;\n        font-style: normal;\n        font-display: fallback;\n      }\n    }\n  }\n}\n","////\n/// @group tools\n////\n\n// Disable indentation linting in this file only\n// sass-lint:disable indentation\n\n/// Font URL\n///\n/// If a custom font-url handler is defined ($govuk-font-url-function) then\n/// it will be called, otherwise a url will be returned with the filename\n/// appended to the font path.\n///\n/// @param {String} $filename - Font filename\n/// @return {String} URL for the filename, wrapped in `url()`\n/// @access public\n\n@function govuk-font-url($filename) {\n  $use-custom-function: variable-exists(\"govuk-font-url-function\")\n    and $govuk-font-url-function\n    and function-exists($govuk-font-url-function);\n\n  @if ($use-custom-function) {\n    @return call(get-function($govuk-font-url-function), $filename);\n  } @else {\n    @return url($govuk-fonts-path + $filename);\n  }\n}\n","// mq() v4.0.2\n// sass-mq/sass-mq\n\n// sass-lint:disable-all\n\n@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (e.g. layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and â€¦`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, printâ€¦\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} â‰¥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n\n// sass-lint:enable-all\n","////\n/// @group settings/spacing\n////\n\n/// Single point spacing variables. Access using `govuk-spacing()`\n/// (see `helpers/spacing`).\n///\n/// @type Map\n/// @access private\n\n$govuk-spacing-points: (\n  0: 0,\n  1: 5px,\n  2: 10px,\n  3: 15px,\n  4: 20px,\n  5: 25px,\n  6: 30px,\n  7: 40px,\n  8: 50px,\n  9: 60px\n) !default;\n\n/// Responsive spacing maps\n///\n/// These definitions are used to generate responsive spacing that adapts\n/// according to the breakpoints (see 'helpers/spacing'). These maps should be\n/// used wherever possible to standardise responsive spacing.\n///\n/// You can define different behaviour on tablet and desktop. The 'null'\n/// breakpoint is for mobile.\n///\n/// Access responsive spacing with `govuk-responsive-margin` or\n/// `govuk-responsive-padding` mixins (see `helpers/spacing`).\n///\n/// @type Map\n/// @access private\n\n$govuk-spacing-responsive-scale: (\n  0: (\n    null: 0,\n    tablet: 0\n  ),\n  1: (\n    null: 5px,\n    tablet: 5px\n  ),\n  2: (\n    null: 10px,\n    tablet: 10px\n  ),\n  3: (\n    null: 15px,\n    tablet: 15px\n  ),\n  4: (\n    null: 15px,\n    tablet: 20px\n  ),\n  5: (\n    null: 15px,\n    tablet: 25px\n  ),\n  6: (\n    null: 20px,\n    tablet: 30px\n  ),\n  7: (\n    null: 25px,\n    tablet: 40px\n  ),\n  8: (\n    null: 30px,\n    tablet: 50px\n  ),\n  9: (\n    null: 40px,\n    tablet: 60px\n  )\n) !default;\n","////\n/// @group helpers\n////\n\n/// Clear floated content within a container using a pseudo element\n///\n/// @access public\n\n@mixin govuk-clearfix {\n  &:after {\n    content: \"\";\n    display: block;\n    clear: both;\n  }\n}\n","////\n/// @group helpers\n////\n\n/// Focusable helper\n///\n/// Provides an additional outline to clearly indicate when the target element is\n/// focussed. Used for interactive elements which themselves have some background\n/// or border, such as most form elements.\n///\n/// @access public\n\n@mixin govuk-focusable {\n  &:focus {\n    outline: $govuk-focus-width solid $govuk-focus-colour;\n    outline-offset: 0;\n  }\n}\n\n/// Focusable with fill helper\n///\n/// Provides an additional outline and background colour to clearly indicate when\n/// the target element is focussed. Used for interactive text-based elements such\n/// as links.\n///\n/// @access public\n\n@mixin govuk-focusable-fill {\n  &:focus {\n    outline: $govuk-focus-width solid $govuk-focus-colour;\n    outline-offset: 0;\n    background-color: $govuk-focus-colour;\n  }\n}\n","////\n/// @group helpers\n////\n\n/// Single point spacing\n///\n/// Returns measurement corresponding to the spacing point requested.\n///\n/// @param {Number} $spacing-point - Point on the spacing scale (set in `settings/_spacing.sccs`)\n///\n/// @returns {String} Spacing Measurement eg. 10px\n///\n/// @example scss\n///   .element {\n///     padding: govuk-spacing(5);\n///     top: govuk-spacing(2) !important; // if `!important` is required\n///   }\n/// @access public\n\n@function govuk-spacing($spacing-point) {\n\n  $actual-input-type: type-of($spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-points, $spacing-point) {\n    @error \"Unknown spacing variable `#{$spacing-point}`. Make sure you are using a point from the spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  @return map-get($govuk-spacing-points, $spacing-point);\n}\n\n/// Responsive spacing\n///\n/// Adds responsive spacing (either padding or margin, depending on `$property`)\n/// by fetching a 'spacing map' from the responsive spacing scale, which defines\n/// different spacing values at different breakpoints.\n///\n/// To generate responsive spacing, use 'govuk-responsive-margin' or\n/// 'govuk-responsive-padding' mixins\n///\n/// @param {Number} $responsive-spacing-point - Point on the responsive spacing\n///   scale, corresponds to a map of breakpoints and spacing values\n/// @param {String} $property - Property to add spacing to (e.g. 'margin')\n/// @param {String} $direction [all] - Direction to add spacing to\n///   (`top`, `right`, `bottom`, `left`, `all`)\n/// @param {Boolean} $important [false] - Whether to mark as `!important`\n/// @param {Number} $adjustment [false] - Offset to adjust spacing by\n///\n/// @access private\n\n@mixin _govuk-responsive-spacing($responsive-spacing-point, $property, $direction: \"all\", $important: false, $adjustment: false) {\n\n  $actual-input-type: type-of($responsive-spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \" + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-responsive-scale, $responsive-spacing-point) {\n    @error \"Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the \"\n    + \"responsive spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  // Make sure that the return value from `_settings/spacing.scss` is a map.\n  $scale-map: map-get($govuk-spacing-responsive-scale, $responsive-spacing-point);\n  $actual-map-type: type-of($scale-map);\n  @if $actual-map-type != \"map\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)\";\n  }\n\n  // Loop through each breakpoint in the map\n  @each $breakpoint, $breakpoint-value in $scale-map {\n\n    @if ($adjustment) {\n      $breakpoint-value: $breakpoint-value + $adjustment;\n    }\n\n    // The 'null' breakpoint is for mobile.\n    @if $breakpoint == null {\n\n      @if $direction == all {\n        #{$property}: $breakpoint-value iff($important, !important);\n      } @else {\n        #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        @if $direction == all {\n          #{$property}: $breakpoint-value iff($important, !important);\n        } @else {\n          #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n        }\n      }\n    }\n  }\n}\n\n/// Responsive margin\n///\n/// Adds responsive margin by fetching a 'spacing map' from the responsive\n/// spacing scale, which defines different spacing values at different\n/// breakpoints. Wrapper for the `_govuk-responsive-spacing` mixin.\n///\n/// @see {mixin} _govuk-responsive-spacing\n///\n/// @param {Number} $responsive-spacing-point - Point on the responsive spacing\n/// scale, corresponds to a map of breakpoints and spacing values\n/// @param {String} $direction [all] - Direction to add spacing to\n///   (`top`, `right`, `bottom`, `left`, `all`)\n/// @param {Boolean} $important [false] - Whether to mark as `!important`\n/// @param {Number} $adjustment [false] - Offset to adjust spacing by\n///\n/// @example scss\n///   .element {\n///      @include govuk-responsive-margin(6, \"left\", $adjustment: 1px);\n///   }\n///\n/// @access public\n\n@mixin govuk-responsive-margin($responsive-spacing-point, $direction: \"all\", $important: false, $adjustment: false) {\n  @include _govuk-responsive-spacing($responsive-spacing-point, \"margin\", $direction, $important, $adjustment);\n}\n\n/// Responsive padding\n///\n/// Adds responsive padding by fetching a 'spacing map' from the responsive\n/// spacing scale, which defines different spacing values at different\n/// breakpoints. Wrapper for the `_govuk-responsive-spacing` mixin.\n///\n/// @see {mixin} _govuk-responsive-spacing\n///\n/// @param {Number} $responsive-spacing-point - Point on the responsive spacing\n///   scale, corresponds to a map of breakpoints and spacing values\n/// @param {String} $direction [all] - Direction to add spacing to\n///   (`top`, `right`, `bottom`, `left`, `all`)\n/// @param {Boolean} $important [false] - Whether to mark as `!important`\n/// @param {Number} $adjustment [false] - Offset to adjust spacing\n///\n/// @example scss\n///   .element {\n///      @include govuk-responsive-padding(6, \"left\", $adjustment: 1px);\n///   }\n///\n/// @access public\n\n\n@mixin govuk-responsive-padding($responsive-spacing-point, $direction: \"all\", $important: false, $adjustment: false) {\n  @include _govuk-responsive-spacing($responsive-spacing-point, \"padding\", $direction, $important, $adjustment);\n}\n","////\n/// @group helpers\n////\n\n/// Calculate the height of an equilateral triangle\n///\n/// Multiplying half the length of the base of an equilateral triangle by the\n/// square root of three gives us its height. We use 1.732 as an approximation.\n///\n/// @param {Number} $base - Length of the base of the triangle\n/// @return {Number} Calculated height of the triangle\n/// @access private\n\n@function _govuk-equilateral-height($base) {\n  $square-root-of-three: 1.732;\n\n  @return ($base / 2) * $square-root-of-three;\n}\n\n/// Arrow mixin\n///\n/// Generate Arrows (triangles) by using a mix of transparent (1) and coloured\n/// borders. The coloured borders inherit the text colour of the element (2).\n///\n/// Ensure the arrow is rendered correctly if browser colours are overridden by\n/// providing a clip path (3). Without this the transparent borders are\n/// overridden to become visible which results in a square.\n///\n/// We need both because older browsers do not support clip-path.\n///\n/// @param {String} $direction - Direction for arrow: up, right, down, left.\n/// @param {Number} $base - Length of the triangle 'base' side\n/// @param {Number} $height [null] - Height of triangle. Omit for equilateral.\n/// @param {String} $display [block] - CSS display property of the arrow\n///\n/// @access public\n\n@mixin govuk-shape-arrow($direction, $base, $height: null, $display: block) {\n  display: $display;\n\n  width: 0;\n  height: 0;\n\n  border-style: solid;\n  border-color: transparent; // 1\n\n  $perpendicular: $base / 2;\n\n  @if ($height == null) {\n    $height: _govuk-equilateral-height($base);\n  }\n\n  @if $direction == \"up\" {\n    -webkit-clip-path: polygon(50% 0%, 0% 100%, 100% 100%);\n            clip-path: polygon(50% 0%, 0% 100%, 100% 100%); // 3\n\n    border-width: 0 $perpendicular $height $perpendicular;\n    border-bottom-color: inherit; // 2\n  } @else if $direction == \"right\" {\n    -webkit-clip-path: polygon(0% 0%, 100% 50%, 0% 100%);\n            clip-path: polygon(0% 0%, 100% 50%, 0% 100%); // 3\n\n    border-width: $perpendicular 0 $perpendicular $height;\n    border-left-color: inherit; // 2\n  } @else if $direction == \"down\" {\n    -webkit-clip-path: polygon(0% 0%, 50% 100%, 100% 0%);\n            clip-path: polygon(0% 0%, 50% 100%, 100% 0%); // 3\n\n    border-width: $height $perpendicular 0 $perpendicular;\n    border-top-color: inherit; // 2\n  } @else if $direction == \"left\" {\n    -webkit-clip-path: polygon(0% 50%, 100% 100%, 100% 0%);\n            clip-path: polygon(0% 50%, 100% 100%, 100% 0%); // 3\n\n    border-width: $perpendicular $height $perpendicular 0;\n    border-right-color: inherit; // 2\n  } @else {\n    @error \"Invalid arrow direction: expected `up`, `right`, `down` or `left`, got `#{$direction}`\";\n  }\n}\n","@mixin govuk-width-container {\n  // Limit the width of the container to the page width\n  max-width: $govuk-page-width;\n\n  @include govuk-if-ie8 {\n    width: $govuk-page-width;\n  }\n\n  // On mobile, add half width gutters\n  margin: 0 $govuk-gutter-half;\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin: 0 $govuk-gutter;\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($govuk-page-width + $govuk-gutter * 2)})\") {\n    margin: 0 auto;\n  }\n}\n\n@include govuk-exports(\"govuk/objects/width-container\") {\n  .govuk-width-container {\n    @include govuk-width-container;\n  }\n}\n","////\n/// @group settings/measurements\n////\n\n\n\n// =========================================================\n// Page layout\n// =========================================================\n\n/// Width of main container\n///\n/// @type Number\n/// @access public\n\n$govuk-page-width: 960px !default;\n\n/// Width of gutter between grid columns\n///\n/// @type Number\n/// @access public\n\n$govuk-gutter: 30px !default;\n\n/// Width of half the gutter between grid columns\n///\n/// @type Number\n/// @access public\n\n$govuk-gutter-half: $govuk-gutter / 2;\n\n\n\n// =========================================================\n// Borders\n// =========================================================\n\n/// Standard border width\n///\n/// @type Number\n/// @access public\n\n$govuk-border-width: 5px !default;\n\n/// Wide border width\n///\n/// @type Number\n/// @access public\n\n$govuk-border-width-wide: 10px !default;\n\n/// Border width on mobile\n///\n/// @type Number\n/// @access public\n\n$govuk-border-width-mobile: 4px !default;\n\n/// Form control border width\n///\n/// @type Number\n/// @access public\n\n$govuk-border-width-form-element: 2px !default;\n\n/// Form control border width when in error state\n///\n/// @type Number\n/// @access public\n\n$govuk-border-width-form-element-error: 4px !default;\n\n/// Form group border width when in error state\n///\n/// @type Number\n/// @access public\n\n$govuk-border-width-form-group-error: $govuk-border-width !default;\n\n/// Border width of focus outline\n///\n/// @type Number\n/// @access public\n\n$govuk-focus-width: 3px !default;\n"]}